// Auto-generated file - do not edit directly
export const TEMPLATES: Record<string, string> = {
  comments:
    "# PR Review Comments\n\n## Instructions\n\nFeel free to delete any comments below that you don't want to address. Only keep comments that are relevant to you. For each comment you keep, write your response or action plan underneath it - the AI will use this to create the appropriate tasks.\n\nNote: This tool will not respond to comments on GitHub for you - you are responsible for responding to reviewers directly on the platform.\n\n## Comments\n\n### Comment 1\n\n**Comment**:\n\n**Your Response/Action**:\n\n---\n\n### Comment 2\n\n**Comment**:\n\n**Your Response/Action**:\n\n---\n\n## Notes\n\nUse this section to add any thoughts about the overall review feedback that will help the AI understand the context and priority of changes needed.\n",
  context:
    "# Task Context\n\n## Overview\n\n[//]: # 'Brief description of what you want to accomplish in this project.'\n\n## Goals\n\n[//]: # 'What you want to achieve.'\n\n## Technical Requirements\n\n[//]: # 'Technical constraints, performance needs, and implementation requirements.'\n\n## Resources\n\n[//]: # 'This is where you can mention online resources like Jira tickets, Confluence pages, or other URLs.'\n\n### Relevant Files/Documentation\n\n[//]: # '- Existing code files to reference'\n[//]: # '- Configuration files'\n[//]: # '- Internal documentation'\n",
  plan_guide:
    '# Plan Creation Guide\n\n## Purpose\n\nThis guide helps create effective project plans.\n\n## Structure\n\n- Start with clear summary\n- Define testable acceptance criteria\n- Outline technical approach\n- Keep it focused and actionable\n\n## Best Practices\n\n- Make acceptance criteria specific and measurable\n- Break down complex work into phases\n- Consider dependencies and risks\n- **All external dependencies must specify versions** (e.g., "React ^18.2.0", not just "React")\n\n## External Dependencies\n\nWhen listing external dependencies, always include specific version requirements:\n\n- ✅ Good: "typescript": "^5.0.0"\n- ❌ Bad: "typescript": "latest"\n- ✅ Good: Node.js 18+ required\n- ❌ Bad: Node.js required\n',
  plan: '# Project Plan\n\n## Summary\n\n## Acceptance Criteria\n\n- [ ]\n- [ ]\n- [ ]\n\n## Technical Approach\n',
  review_task_results:
    '# Review Task Results\n\n## Summary\n\n## Changes Made\n\n## Comments Addressed\n\n## Problems Encountered\n\n[//]: # "Document any unexpected issues that arose during task execution, how they were solved, or if they weren\'t solved, explain why."\n',
  review_task:
    '# PR Review Task\n\n## Relevant Comments\n\nList the specific comments from comments.md that this task addresses:\n\n1. **Comment reference**:\n   - **Action planned**:\n\n2. **Comment reference**:\n   - **Action planned**:\n\n## Steps\n\n1. [ ]\n2. [ ]\n3. [ ]\n4. [ ]\n\n## Verification\n\nThis section is mandatory and must be run after all steps are completed:\n\n- [ ]\n- [ ]\n- [ ]\n',
  system_explanation:
    "**AI Engineer Workflow** helps you work together with AI on any coding task. This system was built to teach effective collaboration with AI through a guided workflow. You can create plans, break them down into smaller tasks, get information from Jira and Confluence, and improve your code by handling PR comments.\n\nFor best results, commit your changes often and start new conversations to clear the AI's context when needed. Don't worry about losing progress - this system remembers where you left off!\n\n**Key Concepts:**\n\n- **Plans**: Define what you want to accomplish with acceptance criteria\n- **Tasks**: Break plans into small, focused work sessions\n- **Reviews**: Handle PR feedback systematically\n- **Spells**: Commands to navigate the workflow (Accio, Expecto, Reparo, etc.)\n",
  task_guide:
    '# Task Creation Guide\n\n## Purpose\n\nThis guide helps create focused, actionable tasks.\n\n## Structure\n\n- Clear objective linked to acceptance criteria\n- Step-by-step implementation plan\n- **Verification section that tests what was accomplished (mandatory)**\n\n## Best Practices\n\n- Keep tasks small and completable in one session\n- Focus on one acceptance criterion at a time\n- Each task should have steps and a verification section\n- **The verification section is mandatory and must be run immediately after all steps are completed**\n\n## Global Verification Steps\n\nAdd project-specific verification steps that should be run after every task:\n\n**Example global steps to include in each task:**\n\n- [ ] Run `npm run build` and ensure no build errors\n- [ ] Run `npm run test` and ensure all tests pass\n- [ ] Run `npm run lint` and fix any linting issues\n- [ ]\n\n**Your project-specific steps:**\n\n- [ ]\n- [ ]\n- [ ]\n',
  task_results:
    '# Task Results\n\n## Summary\n\n## What Was Accomplished\n\n## Files Changed\n\n## Problems Encountered\n\n[//]: # "Document any unexpected issues that arose during task execution, how they were solved, or if they weren\'t solved, explain why."\n',
  task: "---\ntask_name: '<task-name>'\n---\n\n# Task:\n\n## Objective\n\n## Acceptance Criteria\n\nThis task works toward the following acceptance criteria from the plan:\n\n- [ ] **AC**:\n\n## Steps\n\n1. [ ]\n2. [ ]\n3. [ ]\n4. [ ]\n\n## Verification\n\nThis section is mandatory and must be run after all steps are completed:\n\n- [ ]\n- [ ]\n- [ ]\n- [ ]\n",
};
